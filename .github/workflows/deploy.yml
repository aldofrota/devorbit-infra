name: Deploy to Staging

on:
  pull_request:
    types: [opened, synchronize, reopened]
    branches: [main, develop]

env:
  REGISTRY: docker.io
  IMAGE_NAME: devorbit

jobs:
  build-and-deploy:
    runs-on: ubuntu-latest

    steps:
      - name: Checkout code
        uses: actions/checkout@v3

      - name: Set up Docker Buildx
        uses: docker/setup-buildx-action@v2

      - name: Log in to DockerHub
        uses: docker/login-action@v2
        with:
          username: ${{ secrets.DOCKERHUB_USERNAME }}
          password: ${{ secrets.DOCKERHUB_TOKEN }}

      - name: Extract metadata
        id: meta
        uses: docker/metadata-action@v4
        with:
          images: ${{ env.REGISTRY }}/${{ secrets.DOCKERHUB_USERNAME }}/${{ env.IMAGE_NAME }}
          tags: |
            type=ref,event=branch
            type=ref,event=pr
            type=sha,prefix={{branch}}-
            type=raw,value=latest,enable={{is_default_branch}}

      - name: Build and push Frontend
        uses: docker/build-push-action@v4
        with:
          context: ./frontend
          push: true
          tags: ${{ env.REGISTRY }}/${{ secrets.DOCKERHUB_USERNAME }}/frontend:pr-${{ github.event.number }}
          cache-from: type=gha
          cache-to: type=gha,mode=max

      - name: Build and push Backend
        uses: docker/build-push-action@v4
        with:
          context: ./backend
          push: true
          tags: ${{ env.REGISTRY }}/${{ secrets.DOCKERHUB_USERNAME }}/backend:pr-${{ github.event.number }}
          cache-from: type=gha
          cache-to: type=gha,mode=max

      - name: Build and push SSO
        uses: docker/build-push-action@v4
        with:
          context: ./sso
          push: true
          tags: ${{ env.REGISTRY }}/${{ secrets.DOCKERHUB_USERNAME }}/sso:pr-${{ github.event.number }}
          cache-from: type=gha
          cache-to: type=gha,mode=max

      - name: Comment PR with deployment info
        uses: actions/github-script@v6
        with:
          script: |
            const comment = `ðŸš€ **Build concluÃ­do!**

            As imagens foram construÃ­das e enviadas para o DockerHub:

            - Frontend: \`${{ secrets.DOCKERHUB_USERNAME }}/frontend:pr-${{ github.event.number }}\`
            - Backend: \`${{ secrets.DOCKERHUB_USERNAME }}/backend:pr-${{ github.event.number }}\`
            - SSO: \`${{ secrets.DOCKERHUB_USERNAME }}/sso:pr-${{ github.event.number }}\`

            Para criar um ambiente de staging, use o comando Slack:
            \`/deploy frontend=pr${{ github.event.number }} backend=pr${{ github.event.number }} sso=pr${{ github.event.number }}\`

            Ou acesse: https://${{ github.event.number }}.127.0.0.1.nip.io`;

            github.rest.issues.createComment({
              issue_number: context.issue.number,
              owner: context.repo.owner,
              repo: context.repo.repo,
              body: comment
            });
