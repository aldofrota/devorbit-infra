apiVersion: apps/v1
kind: Deployment
metadata:
  name: {{ include "kafka.fullname" . }}
  labels:
    {{- include "kafka.labels" . | nindent 4 }}
spec:
  replicas: {{ .Values.replicaCount }}
  selector:
    matchLabels:
      {{- include "kafka.selectorLabels" . | nindent 6 }}
  template:
    metadata:
      {{- with .Values.podAnnotations }}
      annotations:
        {{- toYaml . | nindent 8 }}
      {{- end }}
      labels:
        {{- include "kafka.selectorLabels" . | nindent 8 }}
    spec:
      {{- with .Values.imagePullSecrets }}
      imagePullSecrets:
        {{- toYaml . | nindent 8 }}
      {{- end }}
      serviceAccountName: {{ include "kafka.serviceAccountName" . }}
      securityContext:
        {{- toYaml .Values.podSecurityContext | nindent 8 }}
      containers:
        - name: {{ .Chart.Name }}
          securityContext:
            {{- toYaml .Values.securityContext | nindent 12 }}
          image: "{{ .Values.image.repository }}:{{ .Values.image.tag | default .Chart.AppVersion }}"
          imagePullPolicy: {{ .Values.image.pullPolicy }}
          ports:
            - name: kafka
              containerPort: {{ .Values.kafka.port }}
              protocol: TCP
          env:
            - name: KAFKA_BROKER_ID
              value: "1"
            - name: KAFKA_ZOOKEEPER_CONNECT
              value: "{{ include "zookeeper.fullname" . }}:{{ .Values.zookeeper.port }}"
            - name: KAFKA_LISTENER_SECURITY_PROTOCOL_MAP
              value: "INTERNAL:PLAINTEXT"
            - name: KAFKA_LISTENERS
              value: "INTERNAL://:{{ .Values.kafka.port }}"
            - name: KAFKA_ADVERTISED_LISTENERS
              value: "INTERNAL://{{ include "kafka.fullname" . }}:{{ .Values.kafka.port }}"
            - name: KAFKA_INTER_BROKER_LISTENER_NAME
              value: "INTERNAL"
            - name: KAFKA_OFFSETS_TOPIC_REPLICATION_FACTOR
              value: "1"
            - name: KAFKA_AUTO_CREATE_TOPICS_ENABLE
              value: "{{ .Values.kafka.autoCreateTopicsEnable }}"
            - name: KAFKA_DELETE_TOPIC_ENABLE
              value: "{{ .Values.kafka.deleteTopicEnable }}"
            - name: KAFKA_LOG_RETENTION_HOURS
              value: "{{ .Values.kafka.logRetentionHours }}"
            - name: KAFKA_LOG_RETENTION_BYTES
              value: "{{ .Values.kafka.logRetentionBytes }}"
          livenessProbe:
            exec:
              command:
                - sh
                - -c
                - "kafka-topics --bootstrap-server localhost:{{ .Values.kafka.port }} --list"
            initialDelaySeconds: 60
            periodSeconds: 30
            timeoutSeconds: 10
            failureThreshold: 3
          readinessProbe:
            exec:
              command:
                - sh
                - -c
                - "kafka-topics --bootstrap-server localhost:{{ .Values.kafka.port }} --list"
            initialDelaySeconds: 30
            periodSeconds: 10
            timeoutSeconds: 5
          resources:
            {{- toYaml .Values.resources | nindent 12 }}
          {{- if .Values.persistence.enabled }}
          volumeMounts:
            - name: data
              mountPath: /var/lib/kafka/data
          {{- end }}
      {{- if .Values.persistence.enabled }}
      volumes:
        - name: data
          {{- if .Values.persistence.storageClass }}
          persistentVolumeClaim:
            claimName: {{ include "kafka.fullname" . }}-pvc
          {{- else }}
          emptyDir: {}
          {{- end }}
      {{- end }}
      {{- with .Values.nodeSelector }}
      nodeSelector:
        {{- toYaml . | nindent 8 }}
      {{- end }}
      {{- with .Values.affinity }}
      affinity:
        {{- toYaml . | nindent 8 }}
      {{- end }}
      {{- with .Values.tolerations }}
      tolerations:
        {{- toYaml . | nindent 8 }}
      {{- end }} 